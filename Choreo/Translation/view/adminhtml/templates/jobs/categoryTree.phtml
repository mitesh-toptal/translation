<?php 
/*************************************************************************
 *
 * Choreo, Inc CONFIDENTIAL
 * __________________
 *
 *  2020 - Choreo, Inc Incorporated
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Choreo, LLC.
 * The intellectual and technical concepts contained herein are
 * proprietary to Choreo, LLC and may be covered by
 * U.S. and Foreign Patents, patents in process, and are protected
 * by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Choreo, LLC.
 *
 *************************************************************************/
?>
<div class="fieldset-wrapper">
    <div class="fieldset-wrapper-title" data-role="title" aria-controls="super_config-content" role="tab" aria-selected="true" aria-expanded="true">
        <strong class="admin__collapsible-title">
            <span><?php echo __('Please Select Your Categories:') ?></span>
        </strong>
    </div>
</div>
<?php if ($block->getRoot()): ?>
    <div class="custom_checkbox categories-side-col">
        <div class="tree-holder">
            <div id="tree-div" class="tree-wrapper"></div>
        </div>
    </div>
    <div data-id="information-dialog-tree" class="messages" style="display: none;">
        <div class="message message-notice">
            <div><?php /* @escapeNotVerified */ echo __('This operation can take a long time'); ?></div>
        </div>
    </div>
    <input type="hidden" name="categories" value="">
    <script>
        var tree;
        require([
            "jquery",
            'Magento_Ui/js/modal/modal',
            "jquery/ui",
            "prototype",
            "extjs/ext-tree-checkbox",
            "mage/adminhtml/form",
            "mage/translate"
        ], function (jQuery, modal) {			
			
            /**
             * Fix ext compatibility with prototype 1.6
             */
            Ext.lib.Event.getTarget = function (e) {
                var ee = e.browserEvent || e;
                return ee.target ? Event.element(ee) : null;
            };

            Ext.tree.TreePanel.Enhanced = function (el, config) {
                Ext.tree.TreePanel.Enhanced.superclass.constructor.call(this, el, config);
            };

            Ext.extend(Ext.tree.TreePanel.Enhanced, Ext.tree.TreePanel, {

                loadTree: function (config, firstLoad) {
                    var parameters = config['parameters'];
                    var data = config['data'];

                    this.storeId = parameters['store_id'];

                    if (this.storeId !== 0 && $('add_root_category_button')) {
                        $('add_root_category_button').hide();
                    }

                    if ((typeof parameters['root_visible']) !== 'undefined') {
                        this.rootVisible = parameters['root_visible'] * 1;
                    }

                    var root = new Ext.tree.TreeNode(parameters);

                    this.nodeHash = {};
                    this.setRootNode(root);
                    this.modal = modal;

                    if (firstLoad) {
                        this.addListener('click', this.categoryClick);
                        // this.addListener('beforenodedrop', categoryMove.bind(this));
                    }

                    this.loader.buildCategoryTree(root, data);
                    this.el.dom.innerHTML = '';
                    // render the tree
                    this.render();
                    if (parameters['expanded']) {
                        this.expandAll();
                    } else {
                        root.expand();
                    }

                    var selectedNode = this.getNodeById(parameters['category_id']);
                    if (selectedNode) {
                        this.currentNodeId = parameters['category_id'];
                    }
                    this.selectCurrentNode();

                    // Temporary solution will be replaced after refactoring of tree functionality
                    jQuery('body').off('tabsactivate.tree').on('tabsactivate.tree', jQuery.proxy(function (e, ui) {
                        this.activeTab = jQuery(ui.newTab).find('a').prop('id');
                    }, this))
                },

                request: function (url, params) {
                    if (!params) {
                        if (this.activeTab) {
                            var params = {active_tab_id: this.activeTab};
                        }
                        else {
                            var params = {};
                        }
                    }
                    if (!params.form_key) {
                        params.form_key = FORM_KEY;
                    }
                    var result = new Ajax.Request(
                        url + (url.match(new RegExp('\\?')) ? '&isAjax=true' : '?isAjax=true' ),
                        {
                            parameters: params,
                            method: 'post'
                        }
                    );

                    return result;
                },

                selectCurrentNode: function () {
                    if (this.currentNodeId) {
                        var selectedNode = this.getNodeById(this.currentNodeId);
                        if ((typeof selectedNode.attributes.path) !== 'undefined') {
                            var path = selectedNode.attributes.path;
                            if (!this.storeId) {
                                path = '0/' + path;
                            }
                            this.selectPath(path);
                        } else {
                            this.getSelectionModel().select(selectedNode);
                        }
                    }
                },

                collapseTree: function () {
                    this.collapseAll();
                },

                expandTree: function () {
                    this.expandAll();
                },

                categoryClick: function (node, e) {

                    if(node.attributes.checked){
                        node.getUI().check(0);
                    }else{
                        node.getUI().check(1);
                    }
                },

                buildUrl: function (id) {
                    var urlExt = (this.storeId ? 'store/' + this.storeId + '/' : '') + 'id/' + id + '/';
                    return parseSidUrl(this.baseUrl, urlExt);
                },

                getBaseUrl: function () {
                    return this.baseUrl;
                }
            });

            function reRenderTree(switcherParams) {
                // re-render tree by store switcher
                if (tree && switcherParams) {
                    var url;
                    if (switcherParams.useConfirm) {
                        if (!confirm("<?php /* @escapeNotVerified */ echo __('Please confirm site switching. All data that hasn\'t been saved will be lost.') ?>")) {
                            return false;
                        }
                    }

                    if ($('add_root_category_button')) {
                        if (!switcherParams.scopeId) {
                            $('add_root_category_button').show();
                        }
                        else {
                            $('add_root_category_button').hide();
                        }
                    }

                    if (tree.useAjax) {
                        // retain current selected category id
                        url = tree.switchTreeUrl + switcherParams.scopeParams + 'id/' + tree.currentNodeId + '/';
                        // load from cache
                        // load from ajax
                        // add form key
                        var params = {
                            form_key: FORM_KEY
                        };
                        new Ajax.Request(url + (url.match(new RegExp('\\?')) ? '&isAjax=true' : '?isAjax=true' ), {
                            parameters: params,
                            method: 'post',
                            onComplete: function (transport) {
                                var response;

                                try {
                                    response = JSON.parse(transport.responseText);
                                } catch (e) {
                                    console.warn('An error occured while parsing response');
                                }

                                if (!response || !response['parameters']) {
                                    return false;
                                }
                                _renderNewTree(response, switcherParams.scopeParams);
                            }
                        });
                    } else {
                        var baseUrl = '<?php /* @escapeNotVerified */ echo $block->getEditUrl() ?>';
                        var urlExt = switcherParams.scopeParams + 'id/' + tree.currentNodeId + '/';
                        url = parseSidUrl(baseUrl, urlExt);
                        setLocation(url);
                    }
                }
                // render default tree
                else {
                    _renderNewTree();
                }
            }

            function _renderNewTree(config, scopeParams) {
                if (!config) {
                    var config = defaultLoadTreeParams;
                }

                if (tree) {
                    tree.purgeListeners();
                    tree.el.dom.innerHTML = '';
                }
                tree = new Ext.tree.TreePanel.Enhanced('tree-div', newTreeParams);

                tree.loadTree(config, true);

                // try to select current category
                var selectedNode = tree.getNodeById(config.parameters.category_id);
                if (selectedNode) {
                    tree.currentNodeId = config.parameters.category_id;
                }
                tree.selectCurrentNode();

                // update content area
                var url = tree.editUrl;
                if (scopeParams) {
                    url = url + scopeParams;
                }
                <?php if ($block->isClearEdit()): ?>
                if (selectedNode) {
                    url = url + 'id/' + config.parameters.category_id;
                }
                <?php endif;?>
                //updateContent(url); //commented since ajax requests replaced with http ones to load a category
            }

            jQuery(function () {
                categoryLoader = new Ext.tree.TreeLoader({
                    dataUrl: '<?php /* @escapeNotVerified */ echo $block->getLoadTreeUrl() ?>'
                });

                categoryLoader.createNode = function(config) {
                    config.uiProvider = Ext.tree.CheckboxNodeUI;
                    var node;
                    // var _node = Object.clone(config);
                    if (config.children && !config.children.length) {
                        delete(config.children);
                        node = new Ext.tree.AsyncTreeNode(config);
                    } else {
                        node = new Ext.tree.TreeNode(config);
                    }

                    return node;
                };

                categoryLoader.processResponse = function (response, parent, callback) {
                    var config = JSON.parse(response.responseText);

                    this.buildCategoryTree(parent, config);

                    if (typeof callback === "function") {
                        callback(this, parent);
                    }
                };

                categoryLoader.buildCategoryTree = function (parent, config) {
                    if (!config) return null;

                    if (parent && config && config.length) {
                        for (var i = 0; i < config.length; i++) {
                            config[i].uiProvider = Ext.tree.CheckboxNodeUI;
                            var node;
                            var _node = Object.clone(config[i]);
                            if (_node.children && !_node.children.length) {
                                delete(_node.children);
                                node = new Ext.tree.AsyncTreeNode(_node);
                            } else {
                                node = new Ext.tree.TreeNode(config[i]);
                            }

                            parent.appendChild(node);
                            node.loader = node.getOwnerTree().loader;
                            if (_node.children) {
                                this.buildCategoryTree(node, _node.children);
                            }
                        }
                    }
                };

                categoryLoader.buildHash = function (node) {
                    var hash = {};

                    hash = this.toArray(node.attributes);

                    if (node.childNodes.length > 0 || (node.loaded === false && node.loading === false)) {
                        hash['children'] = [];

                        for (var i = 0, len = node.childNodes.length; i < len; i++) {
                            if (!hash['children']) {
                                hash['children'] = [];
                            }
                            hash['children'].push(this.buildHash(node.childNodes[i]));
                        }
                    }

                    return hash;
                };

                categoryLoader.toArray = function (attributes) {
                    var data = {form_key: FORM_KEY};
                    for (var key in attributes) {
                        var value = attributes[key];
                        data[key] = value;
                    }

                    return data;
                };

                categoryLoader.on("beforeload", function (treeLoader, node) {
                    treeLoader.baseParams.id = node.attributes.id;
                    treeLoader.baseParams.store = node.attributes.store;
                    treeLoader.baseParams.form_key = FORM_KEY;
                });

                categoryLoader.on("load", function (treeLoader, node, config) {

                });

                scopeSwitcherHandler = reRenderTree;

                newTreeParams = {
                    animate: false,
                    loader: categoryLoader,
                    enableDD: true,
                    containerScroll: true,
                    selModel: new Ext.tree.CheckNodeMultiSelectionModel(),
                    rootVisible: '<?php /* @escapeNotVerified */ echo $block->getRoot()->getIsVisible() ?>',
                    useAjax: false,
                    switchTreeUrl: '<?php /* @escapeNotVerified */ echo $block->getSwitchTreeUrl() ?>',
                    editUrl: '<?php /* @escapeNotVerified */ echo $block->getEditUrl() ?>',
                    currentNodeId: <?php /* @escapeNotVerified */ echo (int)$block->getCategoryId() ?>,
                    baseUrl: '<?php /* @escapeNotVerified */ echo $block->getEditUrl() ?>',
                    rootUIProvider:   Ext.tree.CheckboxNodeUI
                };
                
                defaultLoadTreeParams = {
                    parameters: {
                        text: '<?php /* @escapeNotVerified */ echo htmlentities($block->getRoot()->getName()) ?>',
                        draggable: false,
                        allowDrop: false,
                        id: <?php /* @escapeNotVerified */ echo (int)$block->getRoot()->getId() ?>,
                        expanded: true,
                        store_id: <?php /* @escapeNotVerified */ echo (int)$block->getStore()->getId() ?>,
                        category_id: <?php /* @escapeNotVerified */ echo (int)$block->getCategoryId() ?>
                    },
                    data: <?php  /* @escapeNotVerified */ echo $block->getTreeJson() ?>
                };
                reRenderTree();


                tree.on('check', function(node) {

                    if(node.attributes.checked) {
                        categoryAdd(node.id);
                        node.childNodes.each(function(c){
                            c.getUI().check(1);
                        });
                    } else {
                        categoryRemove(node.id);
                        node.childNodes.each(function(c){
                            c.getUI().check(0);
                        });
                    }

                }, tree);

                var catIds = '';

                tree.root.cascade(function (n) {
                    if (typeof n.id === "string") {
                        if(n.attributes.checked){
                            catIds += n.id + ',';
                        }
                    }
                });

                jQuery('input[name="categories"]').val(catIds.replace(/,\s*$/, ""));
            });

            function categoryAdd(id) {
                var ids = jQuery('input[name="categories"]').val().split(',');
                ids.push(id);
                jQuery('input[name="categories"]').val(ids.join(','));
            }

            function categoryRemove(id) {
                var ids = jQuery('input[name="categories"]').val().split(',');
                // bug #7654 fixed
                while (-1 != ids.indexOf(id)) {
                    ids.splice(ids.indexOf(id), 1);
                }
                jQuery('input[name="categories"]').val(ids.join(',')) ;
            }
        });

    </script>
<?php endif; ?>